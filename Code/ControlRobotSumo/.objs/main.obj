' Catalina Code

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Init

DAT ' initialized data segment

' Catalina Export speed0

 long ' align long
C_speed0 ' <symbol:speed0>
 long 0

' Catalina Export dir0

 long ' align long
C_dir0 ' <symbol:dir0>
 long 0

' Catalina Export speed1

 long ' align long
C_speed1 ' <symbol:speed1>
 long 0

' Catalina Export dir1

 long ' align long
C_dir1 ' <symbol:dir1>
 long 0

' Catalina Cnst

DAT ' const data segment

 long ' align long
C_main_4_L000005 ' <symbol:4>
 byte 0
 byte 0[49]

' Catalina Export main

' Catalina Code

DAT ' code segment

 long ' align long
C_main ' <symbol:main>
 sub SP,#8
 mov BC,#8
 jmp #NEWF
 sub SP, #468
#ifndef NO_ARGS
 jmp #CALA
 long @C_arg_setup
#endif
 mov r23, r3 ' reg var <- reg arg
 mov r21, r2 ' reg var <- reg arg
 mov r0, FP
 sub r0, #-(-60) ' reg <- addrli
 jmp #LODL
 long @C_main_4_L000005
 mov r1, RI ' reg <- addrg
 jmp #CPYB
 long 50 ' ASGNB
 mov r19, #0 ' reg <- coni
 mov r15, #0 ' reg <- coni
 mov r13, #0 ' reg <- coni
 mov r22, #0 ' reg <- coni
 jmp #LODF
 long -64
 wrlong r22, RI ' ASGNI4 addrl reg
 mov r22, #0 ' reg <- coni
 jmp #LODF
 long -68
 wrlong r22, RI ' ASGNI4 addrl reg
 mov r17, #0 ' reg <- coni
 jmp #LODL
 long -1
 mov r22, RI ' reg <- con
 jmp #LODF
 long -4
 wrlong r22, RI ' ASGNI4 addrl reg
 jmp #LODL
 long -1
 mov r22, RI ' reg <- con
 jmp #LODF
 long -8
 wrlong r22, RI ' ASGNI4 addrl reg
 mov r2, FP
 sub r2, #-(-68) ' reg ARG ADDRLi
 jmp #LODL
 long @C_fct_pwm0
 mov r3, RI ' reg ARG ADDRG
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__coginit_C_
 add SP, #4 ' CALL addrg
 jmp #LODF
 long -4
 wrlong r0, RI ' ASGNI4 addrl reg
 jmp #LODL
 long @C_main_7_L000008
 mov r2, RI ' reg ARG ADDRG
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_printf ' CALL addrg
 mov r2, FP
 sub r2, #-(-268) ' reg ARG ADDRLi
 jmp #LODL
 long @C_fct_pwm1
 mov r3, RI ' reg ARG ADDRG
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__coginit_C_
 add SP, #4 ' CALL addrg
 jmp #LODF
 long -8
 wrlong r0, RI ' ASGNI4 addrl reg
 jmp #LODL
 long @C_main_10_L000011
 mov r2, RI ' reg ARG ADDRG
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_printf ' CALL addrg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C_fct_startsound ' CALL addrg
 mov r2, #0 ' reg ARG coni
 mov r3, #240 ' reg ARG coni
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #4 ' CALL addrg
 mov r22, #30 ' reg <- coni
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #JMPA
 long @C_main_13 ' JUMPV addrg
C_main_12
 mov r2, #1 ' reg ARG coni
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_s4_rxcheck ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
 cmps r11,  #97 wz,wc
 jmp #BR_B
 long @C_main_15 ' LTI4
 cmps r11,  #100 wz,wc
 jmp #BR_A
 long @C_main_15 ' GTI4
 mov r22, r11
 shl r22, #2 ' LSHI4 coni
 jmp #LODL
 long @C_main_30_L000032-388
 mov r20, RI ' reg <- addrg
 adds r22, r20 ' ADDI/P (1)
 rdlong RI, r22
 jmp #JMPI ' JUMPV INDIR reg

' Catalina Cnst

DAT ' const data segment

 long ' align long
C_main_30_L000032 ' <symbol:30>
 long @C_main_18
 long @C_main_23
 long @C_main_28
 long @C_main_29

' Catalina Code

DAT ' code segment
C_main_18
 mov r22, #0 ' reg <- coni
 mov r17, r22 ' CVI, CVU or LOAD
 mov r19, #48 ' reg <- coni
 mov r15, r22 ' CVI, CVU or LOAD
 mov r17, r22 ' CVI, CVU or LOAD
C_main_19
 mov r2, #1 ' reg ARG coni
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_s4_rxcheck ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r19, r22 ' CVI, CVU or LOAD
 mov r22, #10 ' reg <- coni
 mov r0, r22 ' setup r0/r1 (2)
 mov r1, r15 ' setup r0/r1 (2)
 jmp #MULT ' MULT(I/U)
 mov r20, r19 ' CVUI
 and r20, cviu_m1 ' zero extend
 subs r20, #48 ' SUBI4 coni
 mov r15, r0 ' ADDI/P
 adds r15, r20 ' ADDI/P (3)
' C_main_20 ' (symbol refcount = 0)
 adds r17, #1 ' ADDI4 coni
 cmps r17,  #3 wz,wc
 jmp #BR_B
 long @C_main_19 ' LTI4
 jmp #LODL
 long @C_speed0
 wrlong r15, RI ' ASGNI4 addrg reg
 jmp #JMPA
 long @C_main_16 ' JUMPV addrg
C_main_23
 mov r22, #0 ' reg <- coni
 mov r17, r22 ' CVI, CVU or LOAD
 mov r19, #48 ' reg <- coni
 mov r13, r22 ' CVI, CVU or LOAD
 mov r17, r22 ' CVI, CVU or LOAD
C_main_24
 mov r2, #1 ' reg ARG coni
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_s4_rxcheck ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r19, r22 ' CVI, CVU or LOAD
 mov r22, #10 ' reg <- coni
 mov r0, r22 ' setup r0/r1 (2)
 mov r1, r13 ' setup r0/r1 (2)
 jmp #MULT ' MULT(I/U)
 mov r20, r19 ' CVUI
 and r20, cviu_m1 ' zero extend
 subs r20, #48 ' SUBI4 coni
 mov r13, r0 ' ADDI/P
 adds r13, r20 ' ADDI/P (3)
' C_main_25 ' (symbol refcount = 0)
 adds r17, #1 ' ADDI4 coni
 cmps r17,  #3 wz,wc
 jmp #BR_B
 long @C_main_24 ' LTI4
 jmp #LODL
 long @C_speed1
 wrlong r13, RI ' ASGNI4 addrg reg
 jmp #JMPA
 long @C_main_16 ' JUMPV addrg
C_main_28
 mov r2, #1 ' reg ARG coni
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_s4_rxcheck ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r19, r22 ' CVI, CVU or LOAD
 and r22, cviu_m1 ' zero extend
 subs r22, #48 ' SUBI4 coni
 jmp #LODL
 long @C_dir0
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #JMPA
 long @C_main_16 ' JUMPV addrg
C_main_29
 mov r2, #1 ' reg ARG coni
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_s4_rxcheck ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r19, r22 ' CVI, CVU or LOAD
 and r22, cviu_m1 ' zero extend
 subs r22, #48 ' SUBI4 coni
 jmp #LODL
 long @C_dir1
 wrlong r22, RI ' ASGNI4 addrg reg
C_main_15
C_main_16
 mov r2, #1 ' reg ARG coni
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_s4_rxcheck ' CALL addrg
 cmps r0,  #97 wz
 jmp #BRNZ
 long @C_main_34 ' NEI4
C_main_34
 mov r2, #1 ' reg ARG coni
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_s4_rxflush ' CALL addrg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r20, #10 ' reg <- coni
 mov r0, r22 ' setup r0/r1 (2)
 mov r1, r20 ' setup r0/r1 (2)
 jmp #DIVU ' DIVU
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
C_main_13
 jmp #JMPA
 long @C_main_12 ' JUMPV addrg
' C_main_3 ' (symbol refcount = 0)
#ifndef NO_EXIT
 jmp #JMPA
 long @C__exit
#endif

' Catalina Export fct_pwm0

 long ' align long
C_fct_pwm0 ' <symbol:fct_pwm0>
 jmp #PSHM
 long $e80000 ' save registers
 mov r23, #0 ' reg <- coni
 mov r19, #0 ' reg <- coni
 mov r21, #0 ' reg <- coni
 mov r22, #1 ' reg <- coni
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #4 ' CALL addrg
 mov r22, #2 ' reg <- coni
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm0_38 ' JUMPV addrg
C_fct_pwm0_37
 jmp #LODI
 long @C_speed0
 mov r22, RI ' reg <- INDIRI4 addrg
 cmps r22,  #0 wz
 jmp #BR_Z
 long @C_fct_pwm0_40 ' EQI4
 jmp #LODI
 long @C_dir0
 mov r19, RI ' reg <- INDIRI4 addrg
 jmp #LODI
 long @C_speed0
 mov r21, RI ' reg <- INDIRI4 addrg
 mov r2, #0 ' reg ARG coni
 mov r22, #1 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 xor r22, #1 ' BXORI4 coni
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 mov r22, #1 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm0_43 ' JUMPV addrg
C_fct_pwm0_42
 adds r23, #1 ' ADDI4 coni
C_fct_pwm0_43
 cmps r23, r21 wz,wc
 jmp #BR_B
 long @C_fct_pwm0_42 ' LTI4
 mov r2, #0 ' reg ARG coni
 mov r22, #1 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm0_46 ' JUMPV addrg
C_fct_pwm0_45
 adds r23, #1 ' ADDI4 coni
C_fct_pwm0_46
 cmps r23,  #100 wz,wc
 jmp #BR_B
 long @C_fct_pwm0_45 ' LTI4
 mov r23, #0 ' reg <- coni
C_fct_pwm0_40
C_fct_pwm0_38
 jmp #JMPA
 long @C_fct_pwm0_37 ' JUMPV addrg
' C_fct_pwm0_36 ' (symbol refcount = 0)
 jmp #POPM ' restore registers
 jmp #RETN


' Catalina Export fct_pwm1

 long ' align long
C_fct_pwm1 ' <symbol:fct_pwm1>
 jmp #PSHM
 long $e80000 ' save registers
 mov r23, #0 ' reg <- coni
 mov r19, #0 ' reg <- coni
 mov r21, #0 ' reg <- coni
 mov r22, #4 ' reg <- coni
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #4 ' CALL addrg
 mov r22, #8 ' reg <- coni
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm1_50 ' JUMPV addrg
C_fct_pwm1_49
 jmp #LODI
 long @C_speed1
 mov r22, RI ' reg <- INDIRI4 addrg
 cmps r22,  #0 wz
 jmp #BR_Z
 long @C_fct_pwm1_52 ' EQI4
 jmp #LODI
 long @C_dir1
 mov r19, RI ' reg <- INDIRI4 addrg
 jmp #LODI
 long @C_speed1
 mov r21, RI ' reg <- INDIRI4 addrg
 mov r2, #0 ' reg ARG coni
 mov r22, #4 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 xor r22, #1 ' BXORI4 coni
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 mov r22, #4 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm1_55 ' JUMPV addrg
C_fct_pwm1_54
 adds r23, #1 ' ADDI4 coni
C_fct_pwm1_55
 cmps r23, r21 wz,wc
 jmp #BR_B
 long @C_fct_pwm1_54 ' LTI4
 mov r2, #0 ' reg ARG coni
 mov r22, #4 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm1_58 ' JUMPV addrg
C_fct_pwm1_57
 adds r23, #1 ' ADDI4 coni
C_fct_pwm1_58
 cmps r23,  #100 wz,wc
 jmp #BR_B
 long @C_fct_pwm1_57 ' LTI4
 mov r23, #0 ' reg <- coni
C_fct_pwm1_52
C_fct_pwm1_50
 jmp #JMPA
 long @C_fct_pwm1_49 ' JUMPV addrg
' C_fct_pwm1_48 ' (symbol refcount = 0)
 jmp #POPM ' restore registers
 jmp #RETN


' Catalina Export fct_startsound

 long ' align long
C_fct_startsound ' <symbol:fct_startsound>
 jmp #PSHM
 long $d00000 ' save registers
 mov r23, #0 ' reg <- coni
 mov r23, #0 ' reg <- coni
C_fct_startsound_61
 mov r22, #10 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 shr r22, #1 ' RSHU4 coni
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
 mov r22, #0 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r20, #10 ' reg <- coni
 mov r0, r22 ' setup r0/r1 (2)
 mov r1, r20 ' setup r0/r1 (2)
 jmp #DIVU ' DIVU
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
 mov r22, #10 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r20, #10 ' reg <- coni
 mov r0, r22 ' setup r0/r1 (2)
 mov r1, r20 ' setup r0/r1 (2)
 jmp #DIVU ' DIVU
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
 mov r22, #0 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r20, #10 ' reg <- coni
 mov r0, r22 ' setup r0/r1 (2)
 mov r1, r20 ' setup r0/r1 (2)
 jmp #DIVU ' DIVU
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
' C_fct_startsound_62 ' (symbol refcount = 0)
 adds r23, #1 ' ADDI4 coni
 cmps r23,  #3 wz,wc
 jmp #BR_B
 long @C_fct_startsound_61 ' LTI4
 mov r22, #10 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
 mov r22, #0 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
' C_fct_startsound_60 ' (symbol refcount = 0)
 jmp #POPM ' restore registers
 jmp #RETN


' Catalina Import s4_rxcheck

' Catalina Import s4_rxflush

' Catalina Import _outa

' Catalina Import _dira

' Catalina Import _cnt

' Catalina Import _waitcnt

' Catalina Import _coginit_C

' Catalina Import _clockfreq

' Catalina Import printf

' Catalina Cnst

DAT ' const data segment

 long ' align long
C_main_10_L000011 ' <symbol:10>
 byte 83
 byte 116
 byte 97
 byte 114
 byte 116
 byte 32
 byte 102
 byte 99
 byte 116
 byte 32
 byte 112
 byte 119
 byte 109
 byte 49
 byte 10
 byte 13
 byte 0

 long ' align long
C_main_7_L000008 ' <symbol:7>
 byte 83
 byte 116
 byte 97
 byte 114
 byte 116
 byte 32
 byte 102
 byte 99
 byte 116
 byte 32
 byte 112
 byte 119
 byte 109
 byte 48
 byte 10
 byte 13
 byte 0

' Catalina Code

DAT ' code segment
' end
