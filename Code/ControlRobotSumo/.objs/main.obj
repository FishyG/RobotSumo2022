' Catalina Code

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Init

DAT ' initialized data segment

' Catalina Export speed0

 long ' align long
C_speed0 ' <symbol:speed0>
 long 0

' Catalina Export sens0

 long ' align long
C_sens0 ' <symbol:sens0>
 long 0

' Catalina Export speed1

 long ' align long
C_speed1 ' <symbol:speed1>
 long 0

' Catalina Export sens1

 long ' align long
C_sens1 ' <symbol:sens1>
 long 0

' Catalina Export main

' Catalina Code

DAT ' code segment

 long ' align long
C_main ' <symbol:main>
 sub SP,#8
 mov BC,#8
 jmp #NEWF
 sub SP, #408
#ifndef NO_ARGS
 jmp #CALA
 long @C_arg_setup
#endif
 mov r23, r3 ' reg var <- reg arg
 mov r21, r2 ' reg var <- reg arg
 jmp #LODL
 long -1
 mov r22, RI ' reg <- con
 jmp #LODF
 long -4
 wrlong r22, RI ' ASGNI4 addrl reg
 jmp #LODL
 long -1
 mov r22, RI ' reg <- con
 jmp #LODF
 long -8
 wrlong r22, RI ' ASGNI4 addrl reg
 mov r2, FP
 sub r2, #-(-8) ' reg ARG ADDRLi
 jmp #LODL
 long @C_fct_pwm0
 mov r3, RI ' reg ARG ADDRG
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__coginit_C_
 add SP, #4 ' CALL addrg
 jmp #LODF
 long -4
 wrlong r0, RI ' ASGNI4 addrl reg
 jmp #LODL
 long @C_main_3_L000004
 mov r2, RI ' reg ARG ADDRG
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_printf ' CALL addrg
 mov r2, FP
 sub r2, #-(-208) ' reg ARG ADDRLi
 jmp #LODL
 long @C_fct_pwm1
 mov r3, RI ' reg ARG ADDRG
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__coginit_C_
 add SP, #4 ' CALL addrg
 jmp #LODF
 long -8
 wrlong r0, RI ' ASGNI4 addrl reg
 jmp #LODL
 long @C_main_6_L000007
 mov r2, RI ' reg ARG ADDRG
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_printf ' CALL addrg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C_fct_startsound ' CALL addrg
 mov r2, #0 ' reg ARG coni
 mov r3, #240 ' reg ARG coni
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_main_9 ' JUMPV addrg
C_main_8
 mov r2, #1 ' reg ARG coni
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_s4_rxcheck ' CALL addrg
 mov r19, r0 ' CVI, CVU or LOAD
 mov r22, #97 ' reg <- coni
 cmps r19, r22 wz
 jmp #BR_Z
 long @C_main_17 ' EQI4
 cmps r19, r22 wz,wc
 jmp #BR_B
 long @C_main_11 ' LTI4
' C_main_26 ' (symbol refcount = 0)
 cmps r19,  #108 wz
 jmp #BR_Z
 long @C_main_23 ' EQI4
 cmps r19,  #112 wz
 jmp #BR_Z
 long @C_main_20 ' EQI4
 cmps r19,  #113 wz
 jmp #BR_Z
 long @C_main_14 ' EQI4
 jmp #JMPA
 long @C_main_11 ' JUMPV addrg
C_main_14
 jmp #LODI
 long @C_speed0
 mov r22, RI ' reg <- INDIRI4 addrg
 cmps r22,  #90 wz,wc
 jmp #BR_A
 long @C_main_12 ' GTI4
 jmp #LODL
 long @C_speed0
 mov r22, RI ' reg <- addrg
 rdlong r22, r22 ' reg <- INDIRI4 reg
 adds r22, #10 ' ADDI4 coni
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #JMPA
 long @C_main_12 ' JUMPV addrg
C_main_17
 jmp #LODI
 long @C_speed0
 mov r22, RI ' reg <- INDIRI4 addrg
 cmps r22,  #10 wz,wc
 jmp #BR_B
 long @C_main_12 ' LTI4
 jmp #LODL
 long @C_speed0
 mov r22, RI ' reg <- addrg
 rdlong r22, r22 ' reg <- INDIRI4 reg
 subs r22, #10 ' SUBI4 coni
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #JMPA
 long @C_main_12 ' JUMPV addrg
C_main_20
 jmp #LODI
 long @C_speed1
 mov r22, RI ' reg <- INDIRI4 addrg
 cmps r22,  #90 wz,wc
 jmp #BR_A
 long @C_main_12 ' GTI4
 jmp #LODL
 long @C_speed1
 mov r22, RI ' reg <- addrg
 rdlong r22, r22 ' reg <- INDIRI4 reg
 adds r22, #10 ' ADDI4 coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #JMPA
 long @C_main_12 ' JUMPV addrg
C_main_23
 jmp #LODI
 long @C_speed1
 mov r22, RI ' reg <- INDIRI4 addrg
 cmps r22,  #10 wz,wc
 jmp #BR_B
 long @C_main_12 ' LTI4
 jmp #LODL
 long @C_speed1
 mov r22, RI ' reg <- addrg
 rdlong r22, r22 ' reg <- INDIRI4 reg
 subs r22, #10 ' SUBI4 coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
C_main_11
C_main_12
 mov r2, #1 ' reg ARG coni
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C_s4_rxflush ' CALL addrg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r20, #10 ' reg <- coni
 mov r0, r22 ' setup r0/r1 (2)
 mov r1, r20 ' setup r0/r1 (2)
 jmp #DIVU ' DIVU
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
C_main_9
 jmp #JMPA
 long @C_main_8 ' JUMPV addrg
' C_main_1 ' (symbol refcount = 0)
#ifndef NO_EXIT
 jmp #JMPA
 long @C__exit
#endif

' Catalina Export fct_pwm0

 long ' align long
C_fct_pwm0 ' <symbol:fct_pwm0>
 jmp #PSHM
 long $e80000 ' save registers
 mov r23, #0 ' reg <- coni
 mov r19, #0 ' reg <- coni
 mov r21, #0 ' reg <- coni
 mov r22, #1 ' reg <- coni
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #4 ' CALL addrg
 mov r22, #2 ' reg <- coni
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm0_29 ' JUMPV addrg
C_fct_pwm0_28
 jmp #LODI
 long @C_speed0
 mov r22, RI ' reg <- INDIRI4 addrg
 cmps r22,  #0 wz
 jmp #BR_Z
 long @C_fct_pwm0_31 ' EQI4
 jmp #LODI
 long @C_sens0
 mov r19, RI ' reg <- INDIRI4 addrg
 jmp #LODI
 long @C_speed0
 mov r21, RI ' reg <- INDIRI4 addrg
 mov r2, #0 ' reg ARG coni
 mov r22, #1 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 xor r22, #1 ' BXORI4 coni
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 mov r22, #1 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm0_34 ' JUMPV addrg
C_fct_pwm0_33
 adds r23, #1 ' ADDI4 coni
C_fct_pwm0_34
 cmps r23, r21 wz,wc
 jmp #BR_B
 long @C_fct_pwm0_33 ' LTI4
 mov r2, #0 ' reg ARG coni
 mov r22, #1 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm0_37 ' JUMPV addrg
C_fct_pwm0_36
 adds r23, #1 ' ADDI4 coni
C_fct_pwm0_37
 cmps r23,  #100 wz,wc
 jmp #BR_B
 long @C_fct_pwm0_36 ' LTI4
 mov r23, #0 ' reg <- coni
C_fct_pwm0_31
C_fct_pwm0_29
 jmp #JMPA
 long @C_fct_pwm0_28 ' JUMPV addrg
' C_fct_pwm0_27 ' (symbol refcount = 0)
 jmp #POPM ' restore registers
 jmp #RETN


' Catalina Export fct_pwm1

 long ' align long
C_fct_pwm1 ' <symbol:fct_pwm1>
 jmp #PSHM
 long $e80000 ' save registers
 mov r23, #0 ' reg <- coni
 mov r19, #0 ' reg <- coni
 mov r21, #0 ' reg <- coni
 mov r22, #4 ' reg <- coni
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #4 ' CALL addrg
 mov r22, #8 ' reg <- coni
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm1_41 ' JUMPV addrg
C_fct_pwm1_40
 jmp #LODI
 long @C_speed1
 mov r22, RI ' reg <- INDIRI4 addrg
 cmps r22,  #0 wz
 jmp #BR_Z
 long @C_fct_pwm1_43 ' EQI4
 jmp #LODI
 long @C_sens1
 mov r19, RI ' reg <- INDIRI4 addrg
 jmp #LODI
 long @C_speed1
 mov r21, RI ' reg <- INDIRI4 addrg
 mov r2, #0 ' reg ARG coni
 mov r22, #4 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 xor r22, #1 ' BXORI4 coni
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 mov r22, #4 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 mov r2, r22 ' CVI, CVU or LOAD
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm1_46 ' JUMPV addrg
C_fct_pwm1_45
 adds r23, #1 ' ADDI4 coni
C_fct_pwm1_46
 cmps r23, r21 wz,wc
 jmp #BR_B
 long @C_fct_pwm1_45 ' LTI4
 mov r2, #0 ' reg ARG coni
 mov r22, #4 ' reg <- coni
 shl r22, r19 ' LSHI/U (1)
 mov r3, r22 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size, rpsize = 8, spsize = 8
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #4 ' CALL addrg
 jmp #JMPA
 long @C_fct_pwm1_49 ' JUMPV addrg
C_fct_pwm1_48
 adds r23, #1 ' ADDI4 coni
C_fct_pwm1_49
 cmps r23,  #100 wz,wc
 jmp #BR_B
 long @C_fct_pwm1_48 ' LTI4
 mov r23, #0 ' reg <- coni
C_fct_pwm1_43
C_fct_pwm1_41
 jmp #JMPA
 long @C_fct_pwm1_40 ' JUMPV addrg
' C_fct_pwm1_39 ' (symbol refcount = 0)
 jmp #POPM ' restore registers
 jmp #RETN


' Catalina Export fct_startsound

 long ' align long
C_fct_startsound ' <symbol:fct_startsound>
 jmp #PSHM
 long $d00000 ' save registers
 mov r23, #0 ' reg <- coni
 mov r23, #0 ' reg <- coni
C_fct_startsound_52
 mov r22, #10 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 shr r22, #1 ' RSHU4 coni
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
 mov r22, #0 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r20, #10 ' reg <- coni
 mov r0, r22 ' setup r0/r1 (2)
 mov r1, r20 ' setup r0/r1 (2)
 jmp #DIVU ' DIVU
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
 mov r22, #10 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r20, #10 ' reg <- coni
 mov r0, r22 ' setup r0/r1 (2)
 mov r1, r20 ' setup r0/r1 (2)
 jmp #DIVU ' DIVU
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
 mov r22, #0 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov r20, #10 ' reg <- coni
 mov r0, r22 ' setup r0/r1 (2)
 mov r1, r20 ' setup r0/r1 (2)
 jmp #DIVU ' DIVU
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
' C_fct_startsound_53 ' (symbol refcount = 0)
 adds r23, #1 ' ADDI4 coni
 cmps r23,  #3 wz,wc
 jmp #BR_B
 long @C_fct_startsound_52 ' LTI4
 mov r22, #10 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r22, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size, rpsize = 0, spsize = 0
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r20, r0 ' CVI, CVU or LOAD
 mov r2, r22 ' ADDU
 add r2, r20 ' ADDU (3)
 mov BC, #4 ' arg size, rpsize = 4, spsize = 4
 jmp #CALA
 long @C__waitcnt ' CALL addrg
 mov r22, #0 ' reg <- coni
 jmp #LODL
 long @C_speed1
 wrlong r22, RI ' ASGNI4 addrg reg
 jmp #LODL
 long @C_speed0
 wrlong r22, RI ' ASGNI4 addrg reg
' C_fct_startsound_51 ' (symbol refcount = 0)
 jmp #POPM ' restore registers
 jmp #RETN


' Catalina Import s4_rxcheck

' Catalina Import s4_rxflush

' Catalina Import _outa

' Catalina Import _dira

' Catalina Import _cnt

' Catalina Import _waitcnt

' Catalina Import _coginit_C

' Catalina Import _clockfreq

' Catalina Import printf

' Catalina Cnst

DAT ' const data segment

 long ' align long
C_main_6_L000007 ' <symbol:6>
 byte 83
 byte 116
 byte 97
 byte 114
 byte 116
 byte 32
 byte 102
 byte 99
 byte 116
 byte 32
 byte 112
 byte 119
 byte 109
 byte 49
 byte 10
 byte 13
 byte 0

 long ' align long
C_main_3_L000004 ' <symbol:3>
 byte 83
 byte 116
 byte 97
 byte 114
 byte 116
 byte 32
 byte 102
 byte 99
 byte 116
 byte 32
 byte 112
 byte 119
 byte 109
 byte 48
 byte 10
 byte 13
 byte 0

' Catalina Code

DAT ' code segment
' end
